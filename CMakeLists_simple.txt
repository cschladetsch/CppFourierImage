cmake_minimum_required(VERSION 3.20)
project(FourierImageViewer VERSION 1.0.0 LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Find required packages
find_package(OpenGL REQUIRED)
find_package(Threads REQUIRED)

# Find FFTW3 for Fourier transforms
find_library(FFTW3_LIBRARY fftw3)
find_path(FFTW3_INCLUDE_DIR fftw3.h)
if(NOT FFTW3_LIBRARY OR NOT FFTW3_INCLUDE_DIR)
    message(FATAL_ERROR "FFTW3 not found. Please install libfftw3-dev (Ubuntu/Debian) or fftw-devel (Fedora)")
endif()

# Find image libraries for CImg
find_package(PNG)
find_package(JPEG)

# Download single-header libraries
include(FetchContent)

# Dear ImGui
FetchContent_Declare(
    imgui
    GIT_REPOSITORY https://github.com/ocornut/imgui.git
    GIT_TAG v1.90.9
)

# GLFW
FetchContent_Declare(
    glfw
    GIT_REPOSITORY https://github.com/glfw/glfw.git
    GIT_TAG 3.3.9
)

FetchContent_MakeAvailable(imgui glfw)

# ImGui sources
set(IMGUI_SOURCES
    ${imgui_SOURCE_DIR}/imgui.cpp
    ${imgui_SOURCE_DIR}/imgui_demo.cpp
    ${imgui_SOURCE_DIR}/imgui_draw.cpp
    ${imgui_SOURCE_DIR}/imgui_tables.cpp
    ${imgui_SOURCE_DIR}/imgui_widgets.cpp
    ${imgui_SOURCE_DIR}/backends/imgui_impl_glfw.cpp
    ${imgui_SOURCE_DIR}/backends/imgui_impl_opengl3.cpp
    ${imgui_SOURCE_DIR}/misc/cpp/imgui_stdlib.cpp
)

# Download CImg header
FetchContent_Declare(
    cimg_download
    URL https://github.com/dtschump/CImg/raw/master/CImg.h
    DOWNLOAD_NO_EXTRACT TRUE
    DOWNLOAD_DIR ${CMAKE_BINARY_DIR}/external/CImg
)
FetchContent_MakeAvailable(cimg_download)

# Download gl3w
FetchContent_Declare(
    gl3w_download
    URL https://github.com/skaslev/gl3w/raw/master/include/GL/gl3w.h
    DOWNLOAD_NO_EXTRACT TRUE
    DOWNLOAD_DIR ${CMAKE_BINARY_DIR}/external/GL
)
FetchContent_MakeAvailable(gl3w_download)

FetchContent_Declare(
    gl3w_c_download
    URL https://github.com/skaslev/gl3w/raw/master/src/gl3w.c
    DOWNLOAD_NO_EXTRACT TRUE
    DOWNLOAD_DIR ${CMAKE_BINARY_DIR}/external/gl3w
)
FetchContent_MakeAvailable(gl3w_c_download)

# CImg configuration
add_definitions(-Dcimg_display=0)
if(PNG_FOUND)
    add_definitions(-Dcimg_use_png)
endif()
if(JPEG_FOUND)
    add_definitions(-Dcimg_use_jpeg)
endif()

# Include directories
include_directories(
    ${OPENGL_INCLUDE_DIRS}
    ${imgui_SOURCE_DIR}
    ${imgui_SOURCE_DIR}/backends
    ${imgui_SOURCE_DIR}/misc/cpp
    ${CMAKE_BINARY_DIR}/external/CImg
    ${CMAKE_BINARY_DIR}/external
    ${FFTW3_INCLUDE_DIR}
    include
)

if(PNG_FOUND)
    include_directories(${PNG_INCLUDE_DIRS})
endif()
if(JPEG_FOUND)
    include_directories(${JPEG_INCLUDE_DIRS})
endif()

# Source files
set(SOURCES
    src/main.cpp
    src/fourier_transform.cpp
    src/image_processor.cpp
    src/renderer.cpp
    src/ui_manager.cpp
    src/fourier_visualizer.cpp
    src/image_loader.cpp
    src/complex_image.cpp
    ${CMAKE_BINARY_DIR}/external/gl3w/gl3w.c
)

# Header files
set(HEADERS
    include/fourier_transform.h
    include/image_processor.h
    include/renderer.h
    include/ui_manager.h
    include/complex_image.h
    include/fourier_visualizer.h
    include/image_loader.h
)

# Main executable
add_executable(fourier_viewer ${SOURCES} ${HEADERS} ${IMGUI_SOURCES})

target_link_libraries(fourier_viewer 
    glfw
    ${OPENGL_LIBRARIES}
    ${FFTW3_LIBRARY}
    Threads::Threads
    ${CMAKE_DL_LIBS}
    m
)

if(PNG_FOUND)
    target_link_libraries(fourier_viewer ${PNG_LIBRARIES})
endif()
if(JPEG_FOUND)
    target_link_libraries(fourier_viewer ${JPEG_LIBRARIES})
endif()

# Platform-specific settings
if(WIN32)
    target_link_libraries(fourier_viewer opengl32)
elseif(APPLE)
    target_link_libraries(fourier_viewer "-framework OpenGL" "-framework Cocoa" "-framework IOKit" "-framework CoreVideo")
endif()

# Enable compiler warnings
if(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
    target_compile_options(fourier_viewer PRIVATE -Wall -Wextra -Wpedantic)
endif()

# Testing
if(BUILD_TESTS)
    enable_testing()
    add_subdirectory(tests)
endif()